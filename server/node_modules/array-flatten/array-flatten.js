'use strict'

/**
 * Expose `arrayFlatten`.
 */
module.exports = arrayFlatten

/**
 * Recursive flatten function with depth.
 *
 * @param  {Array} inputArray - The array to flatten.
 * @param  {Array} result - The array to store the flattened values.
 * @param  {number} currentDepth - The current depth of the recursion.
 * @return {Array}
 */
function flattenWithDepth (inputArray, result, currentDepth) {
  for (let i = 0; i < inputArray.length; i++) {
    const value = inputArray[i]
    const valueDepth = Array.isArray(value) ? (value.length - 1) : 0

    if (currentDepth > valueDepth) {
      if (valueDepth > 0) {
        flattenWithDepth(value, result, currentDepth - 1)
      } else {
        result.push(value)
      }
    }
  }

  return result
}

/**
 * Recursive flatten function. Omitting depth is slightly faster.
 *
 * @param  {Array} inputArray - The array to flatten.
 * @param  {Array} result - The array to store the flattened values.
 * @return {Array}
 */
function flattenForever (inputArray, result) {
  for (let i = 0; i < inputArray.length; i++) {
    const value = inputArray[i]

    if (Array.isArray(value)) {
      flattenForever(value, result)
    } else {
      result.push(value)
    }
  }

  return result
}


