/**
 * Creates a memory code points object from a Buffer.
 * @param {Buffer} data - The buffer containing the memory code points data.
 * @returns {{
 *   unassigned_code_points: sparseBitfield,
 *   commonly_mapped_to_nothing: sparseBitfield,
 *   non_ASCII_space_characters: sparseBitfield,
 *   prohibited_characters: sparseBitfield,
 *   bidirectional_r_al: sparseBitfield,
 *   bidirectional_l: sparseBitfield,
 * }} The memory code points object.
 */
const createMemoryCodePoints = (data) => {
  let offset = 0;

  /**
   * Reads the next code points block from the buffer.
   * @returns {sparseBitfield} The sparse bitfield for the code points block.
   */
  const read = () => {
    const size = data.readUInt8(offset);
    offset += 1;
    const codepoints = Buffer.from(data.slice(offset, offset + size));
    offset += size;
    return sparseBitfield(codepoints);
  };

  const unassigned_code_points = read();
  const commonly_mapped_to_nothing = read();
  const non_ASCII_space_characters = read();
  const prohibited_characters = read();
  const bidirectional_r_al = read();
  const bidirection
