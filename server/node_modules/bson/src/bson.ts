import { Binary, UUID } from './binary';
import { Code } from './code';
import { DBRef } from './db_ref';
import { Decimal128 } from './decimal128';
import { Double } from './double';
import { Int32 } from './int_32';
import { Long } from './long';
import { MaxKey } from './max_key';
import { MinKey } from './min_key';
import { ObjectId } from './objectid';
import { internalCalculateObjectSize } from './parser/calculate_size';
import { internalDeserialize, DeserializeOptions } from './parser/deserializer';
import { serializeInto, SerializeOptions } from './parser/serializer';
import { BSONRegExp } from './regexp';
import { BSONSymbol } from './symbol';
import { Timestamp } from './timestamp';
import { ByteUtils } from './utils/byte_utils';
import { NumberUtils } from './utils/number_utils';

export type UUIDExtended = typeof UUID.prototype;
export type BinaryExtended = typeof Binary.prototype;
export type BinaryExtendedLegacy = typeof Binary.prototype;
export type BinarySequence = typeof Binary.prototype;
export type CodeExtended = typeof Code.prototype;
export type DBRefLike = typeof DBRef.prototype;
export type Decimal128Extended = typeof Decimal128.prototype;
export type DoubleExtended = typeof Double.prototype;
export type EJSONOptions = {};
export type Int32Extended = typeof Int32.prototype;
export type LongExtended = typeof Long.prototype;
export type MaxKeyExtended = typeof MaxKey.prototype;
export type MinKeyExtended = typeof MinKey.prototype;
export type ObjectIdExtended = typeof ObjectId.prototype;
export type ObjectIdLike = typeof ObjectId.prototype;
export type BSONRegExpExtended = typeof BSONRegExp.prototype;
export type BSONRegExpExtendedLegacy = typeof BSONRegExp.prototype;
export type BSONSymbolExtended = typeof BSONSymbol.prototype;
export type LongWithoutOverrides = typeof Long.prototype;
export type TimestampExtended = typeof Timestamp.prototype;
export type TimestampOverrides = {};
export type LongWithoutOverridesClass = typeof Long;

export {
  Code,
  BSONSymbol,
  DBRef,
  Binary,
  ObjectId,
  UUID,
  Long,
  Timestamp,
  Double,
  Int32,
  MinKey,
  MaxKey,
  BSONRegExp,
  Decimal128
};
export { BSONValue } from './bson_value';
export { BSONError, BSONVersionError, BSONRuntimeError } from './error';
export { BSONType } from './constants';
export { EJSON } from './extended_json';

/** @public */
export interface Document {
  [key: string]: any;
}

/** @internal */
const DEFAULT_MAX_SIZE = 1024 * 1024 * 17;

let buffer: Uint8Array;

/**
 * Sets the size of the internal serialization buffer.
 *
 * @param size - The desired size for the internal serialization buffer in bytes
 * @public
 */
export function setInternalBufferSize(size: number): void {
  if (size <= 0) {
    throw new Error('Buffer size must be greater than zero');
  }
  buffer = ByteUtils.allocate(size);
}

/**
 * Serialize a Javascript object.
 *
 * @param object - the Javascript object to serialize.
 * @returns Buffer object containing the serialized object.
 * @public
 */
export function serialize(object: Document, options: SerializeOptions = {}): Uint8Array {
  // Validate options
  if (options.checkKeys !== false && typeof options.checkKeys !== 'function') {
    throw new Error('Invalid options.checkKeys value');
  }
  if (options.serializeFunctions !== false && typeof options.serializeFunctions !== 'function') {
    throw new Error('Invalid options.serializeFunctions value');
  }
  if (options.ignoreUndefined !== true && options.ignoreUndefined !== false) {
    throw new Error('Invalid options.ignoreUndefined value');
  }

  // Resize the internal serialization buffer if needed
  if (!buffer || buffer.length < options.minInternalBufferSize) {
    buffer = ByteUtils.allocate(options.minInternalBufferSize);
  }

  // Attempt to serialize
  const serializationIndex = serializeInto(
    buffer,
    object,
    options.checkKeys,
    0,
    0,
    options.serializeFunctions,
    options.ignoreUndefined,
    null
  );

  // Create the final buffer
  const finishedBuffer = ByteUtils.allocateUnsafe(serializationIndex);

  // Copy into the finished buffer
  finishedBuffer.set(buffer.subarray(0, serializationIndex), 0);

  // Return the buffer
  return finishedBuffer;
}

/**
 * Serialize a Javascript object using a predefined Buffer and index into the buffer,
 * useful when pre-allocating the space for serialization.
 *
 * @param object - the Javascript object to serialize.
 * @param finalBuffer - the Buffer you pre-allocated to store the serialized BSON object.
 * @returns the index pointing to the last written byte in the buffer.
 * @public
 */
export function serializeWithBufferAndIndex(
  object: Document,
  finalBuffer: Uint8Array,
  options: SerializeOptions = {}
): number {
  // Validate options
  if (options.checkKeys !== false && typeof options.checkKeys !== 'function') {
    throw new Error('Invalid options.checkKeys value');
 
