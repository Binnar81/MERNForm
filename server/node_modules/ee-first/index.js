/*!
 * first-event
 * Copyright(c) 2023 David Archibald
 * MIT Licensed
 */

'use strict'

/**
 * Module exports.
 * @public
 */

module.exports = first

/**
 * Get the first event in a set of event emitters and event pairs.
 *
 * @param {array} stuff
 * @param {function} done
 * @param {object} [context] - The context to call the done callback with
 * @public
 */
function first(stuff, done, context) {
  if (!Array.isArray(stuff)) {
    throw new TypeError('arg must be an array of [ee, events...] arrays')
  }

  if (typeof done !== 'function') {
    throw new TypeError('done must be a function')
  }

  const cleanups = []

  for (let i = 0; i < stuff.length; i++) {
    const arr = stuff[i]

    if (!Array.isArray(arr) || arr.length < 2) {
      throw new TypeError('each array member must be [ee, events...]')
    }

    const ee = arr[0]

    for (let j = 1; j < arr.length; j++) {
      const event = arr[j]
      const fn = listener(event, (err, ee, event, args) => {
        cleanup()
        done.call(context, err, ee, event, args)
      })

      // listen to the event
      ee.on(event, fn)
      // push this listener to the list of cleanups
      cleanups.push({
        ee: ee,
        event: event,
        fn: fn,
      })
    }
  }

  function cleanup() {
    for (let i = 0; i < cleanups.length; i++) {
      const x = cleanups[i]
      x.ee.removeListener(x.event, x.fn)
    }
    cleanups.length = 0
  }

  function thunk(fn) {
    cleanup()
    done = fn
  }

  thunk.cancel = cleanup

  return thunk
}

/**
 * Create the event listener.
 * @private
 */
function listener(event, done) {
  return function onevent(...args) {
    const err = event === 'error' ? args.shift() : null

    done(err, this, event, args)
 
